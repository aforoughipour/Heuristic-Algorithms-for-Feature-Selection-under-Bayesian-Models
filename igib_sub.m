function un_post_f=igib_sub(x0,x1,pf,prior)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%initilize

n0=size(x0,1); %%%sample size in class 0
n1=size(x1,1); %%%sample size in class 1
nt=n0+n1; %%%%total sample size

xt=[x0;x1];




if nargin<4   %%%%if no prior structure is given, useJeffreys non-informative prior
    
    sf0=0;
    sf1=0;
    sft=0;
    
    kf0=0;
    kf1=0;
    kft=0;
    
    mf0=0;
    mf1=0;
    mft=0;
    
    vf0=0;
    vf1=0;
    vft=0;
    
    %%%%%lq is the term that is generated by nu and gamma terms of the NIW
    %%%%%normalization constant
    lq0=-0.5*log(n0)+gammaln(0.5*n0);
    lq1=-0.5*log(n1)+gammaln(0.5*n1);
    lqt=-0.5*log(nt)+gammaln(0.5*nt);
    
    lq=log(pf/(1-pf))+lq0+lq1-lqt;
    
else   %%%%if we do have a prior, use it!
    
    sf0=prior.sf0;
    sf1=prior.sf1;
    sft=prior.sft;
    
    kf0=prior.kf0;
    kf1=prior.kf1;
    kft=prior.kft;
    
    mf0=prior.mf0;
    mf1=prior.mf1;
    mft=prior.mft;
    
    vf0=prior.vf0;
    vf1=prior.vf1;
    vft=prior.vft;
    
    
    lq0=0.5*kf0*log(sf0)+0.5*log(vf0)-gammaln(0.5*kf0)-0.5*log(vf0+n0)+gammaln(0.5*(kf0+n0));
    lq1=0.5*kf1*log(sf1)+0.5*log(vf1)-gammaln(0.5*kf1)-0.5*log(vf1+n1)+gammaln(0.5*(kf1+n1));
    lqt=0.5*kft*log(sft)+0.5*log(vft)-gammaln(0.5*kft)-0.5*log(vft+nt)+gammaln(0.5*(kft+nt));
    
    lq=log(pf/(1-pf))+lq0+lq1-lqt;
    
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%find moments

%%%find means
muf0=mean(x0)';
muf1=mean(x1)';
muft=mean(xt)';

%%find variances
cf0=var(x0)';
cf1=var(x1)';
cft=var(xt)';


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%find posterior for each feature


%%%the coefficients used for computing updated s value
mfq0=(n0*vf0)./(vf0+n0);
mfq1=(n1*vf1)./(vf1+n1);
mfqt=(nt*vft)./(vft+nt);


%%%updated kappa
kf0s=kf0+n0;
kf1s=kf1+n1;
kfts=kft+nt;

%%%%updated s
sf0s=sf0+(n0-1)*cf0+mfq0*(muf0-mf0).^2;
sf1s=sf1+(n1-1)*cf1+mfq1*(muf1-mf1).^2;
sfts=sft+(nt-1)*cft+mfqt*(muft-mft).^2;

% %%%normalize using sample size since it helps with numerics
% 
% sf0s=sf0s/(n0-1);
% sf1s=sf1s/(n1-1);
% sfts=sfts/(nt-1);


%%%%%find posterior
log_un_post_f=lq-0.5*( kf0s*log(sf0s)+kf1s*log(sf1s)-kfts*log(sfts) );

un_post_f=exp(log_un_post_f);
    